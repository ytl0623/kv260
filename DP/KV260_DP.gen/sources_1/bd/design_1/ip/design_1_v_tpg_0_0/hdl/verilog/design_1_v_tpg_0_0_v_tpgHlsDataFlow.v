// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_tpg_0_0_v_tpgHlsDataFlow (
        height,
        width,
        field_id,
        fid_in,
        bckgndId,
        ovrlayId,
        maskId,
        motionSpeed,
        colorFormat,
        crossHairX,
        crossHairY,
        ZplateHorContStart,
        ZplateHorContDelta,
        ZplateVerContStart,
        ZplateVerContDelta,
        boxSize,
        boxColorR,
        boxColorG,
        boxColorB,
        dpDynamicRange,
        dpYUVCoef,
        m_axis_video_TDATA,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        fid,
        s,
        ap_clk,
        ap_rst,
        ovrlayId_ap_vld,
        maskId_ap_vld,
        crossHairX_ap_vld,
        crossHairY_ap_vld,
        boxSize_ap_vld,
        boxColorR_ap_vld,
        boxColorG_ap_vld,
        boxColorB_ap_vld,
        ap_start,
        height_ap_vld,
        width_ap_vld,
        bckgndId_ap_vld,
        ZplateHorContStart_ap_vld,
        ZplateHorContDelta_ap_vld,
        ZplateVerContStart_ap_vld,
        ZplateVerContDelta_ap_vld,
        dpDynamicRange_ap_vld,
        dpYUVCoef_ap_vld,
        motionSpeed_ap_vld,
        colorFormat_ap_vld,
        s_ap_vld,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        fid_in_ap_vld,
        fid_ap_vld,
        field_id_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [15:0] height;
input  [15:0] width;
input  [15:0] field_id;
input  [0:0] fid_in;
input  [7:0] bckgndId;
input  [7:0] ovrlayId;
input  [7:0] maskId;
input  [7:0] motionSpeed;
input  [7:0] colorFormat;
input  [15:0] crossHairX;
input  [15:0] crossHairY;
input  [15:0] ZplateHorContStart;
input  [15:0] ZplateHorContDelta;
input  [15:0] ZplateVerContStart;
input  [15:0] ZplateVerContDelta;
input  [15:0] boxSize;
input  [15:0] boxColorR;
input  [15:0] boxColorG;
input  [15:0] boxColorB;
input  [7:0] dpDynamicRange;
input  [7:0] dpYUVCoef;
output  [23:0] m_axis_video_TDATA;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
output  [0:0] fid;
input  [31:0] s;
input   ap_clk;
input   ap_rst;
input   ovrlayId_ap_vld;
input   maskId_ap_vld;
input   crossHairX_ap_vld;
input   crossHairY_ap_vld;
input   boxSize_ap_vld;
input   boxColorR_ap_vld;
input   boxColorG_ap_vld;
input   boxColorB_ap_vld;
input   ap_start;
input   height_ap_vld;
input   width_ap_vld;
input   bckgndId_ap_vld;
input   ZplateHorContStart_ap_vld;
input   ZplateHorContDelta_ap_vld;
input   ZplateVerContStart_ap_vld;
input   ZplateVerContDelta_ap_vld;
input   dpDynamicRange_ap_vld;
input   dpYUVCoef_ap_vld;
input   motionSpeed_ap_vld;
input   colorFormat_ap_vld;
input   s_ap_vld;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
input   fid_in_ap_vld;
output   fid_ap_vld;
input   field_id_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire   [7:0] entry_proc_U0_ap_return_0;
wire   [7:0] entry_proc_U0_ap_return_1;
wire   [15:0] entry_proc_U0_ap_return_2;
wire   [15:0] entry_proc_U0_ap_return_3;
wire   [15:0] entry_proc_U0_ap_return_4;
wire   [15:0] entry_proc_U0_ap_return_5;
wire   [15:0] entry_proc_U0_ap_return_6;
wire   [15:0] entry_proc_U0_ap_return_7;
wire    ap_channel_done_boxColorB_c_channel;
wire    boxColorB_c_channel_full_n;
reg    ap_sync_reg_channel_write_boxColorB_c_channel;
wire    ap_sync_channel_write_boxColorB_c_channel;
wire    ap_channel_done_boxColorG_c_channel;
wire    boxColorG_c_channel_full_n;
reg    ap_sync_reg_channel_write_boxColorG_c_channel;
wire    ap_sync_channel_write_boxColorG_c_channel;
wire    ap_channel_done_boxColorR_c_channel;
wire    boxColorR_c_channel_full_n;
reg    ap_sync_reg_channel_write_boxColorR_c_channel;
wire    ap_sync_channel_write_boxColorR_c_channel;
wire    ap_channel_done_boxSize_c_channel;
wire    boxSize_c_channel_full_n;
reg    ap_sync_reg_channel_write_boxSize_c_channel;
wire    ap_sync_channel_write_boxSize_c_channel;
wire    ap_channel_done_crossHairY_c_channel;
wire    crossHairY_c_channel_full_n;
reg    ap_sync_reg_channel_write_crossHairY_c_channel;
wire    ap_sync_channel_write_crossHairY_c_channel;
wire    ap_channel_done_crossHairX_c_channel;
wire    crossHairX_c_channel_full_n;
reg    ap_sync_reg_channel_write_crossHairX_c_channel;
wire    ap_sync_channel_write_crossHairX_c_channel;
wire    ap_channel_done_maskId_c_channel;
wire    maskId_c_channel_full_n;
reg    ap_sync_reg_channel_write_maskId_c_channel;
wire    ap_sync_channel_write_maskId_c_channel;
wire    ap_channel_done_ovrlayId_c_channel;
wire    ovrlayId_c_channel_full_n;
reg    ap_sync_reg_channel_write_ovrlayId_c_channel;
wire    ap_sync_channel_write_ovrlayId_c_channel;
wire    tpgBackground_U0_ap_start;
wire    tpgBackground_U0_ap_done;
wire    tpgBackground_U0_ap_continue;
wire    tpgBackground_U0_ap_idle;
wire    tpgBackground_U0_ap_ready;
wire   [23:0] tpgBackground_U0_bckgndYUV_din;
wire    tpgBackground_U0_bckgndYUV_write;
wire   [15:0] tpgBackground_U0_height_c_din;
wire    tpgBackground_U0_height_c_write;
wire   [15:0] tpgBackground_U0_width_c_din;
wire    tpgBackground_U0_width_c_write;
wire   [7:0] tpgBackground_U0_motionSpeed_c_din;
wire    tpgBackground_U0_motionSpeed_c_write;
wire   [7:0] tpgBackground_U0_colorFormat_c_din;
wire    tpgBackground_U0_colorFormat_c_write;
wire    tpgForeground_U0_ap_start;
wire    tpgForeground_U0_ap_done;
wire    tpgForeground_U0_ap_continue;
wire    tpgForeground_U0_ap_idle;
wire    tpgForeground_U0_ap_ready;
wire    tpgForeground_U0_bckgndYUV_read;
wire    tpgForeground_U0_height_read;
wire    tpgForeground_U0_width_read;
wire    tpgForeground_U0_colorFormat_read;
wire    tpgForeground_U0_motionSpeed_read;
wire   [23:0] tpgForeground_U0_ovrlayYUV_din;
wire    tpgForeground_U0_ovrlayYUV_write;
wire    MultiPixStream2AXIvideo_U0_ap_start;
wire    MultiPixStream2AXIvideo_U0_ap_done;
wire    MultiPixStream2AXIvideo_U0_ap_continue;
wire    MultiPixStream2AXIvideo_U0_ap_idle;
wire    MultiPixStream2AXIvideo_U0_ap_ready;
wire    MultiPixStream2AXIvideo_U0_ovrlayYUV_read;
wire   [23:0] MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;
wire    MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;
wire   [2:0] MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;
wire   [2:0] MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;
wire   [0:0] MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;
wire   [0:0] MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;
wire   [0:0] MultiPixStream2AXIvideo_U0_m_axis_video_TID;
wire   [0:0] MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;
wire   [0:0] MultiPixStream2AXIvideo_U0_fid;
wire    MultiPixStream2AXIvideo_U0_fid_ap_vld;
wire   [7:0] ovrlayId_c_channel_dout;
wire    ovrlayId_c_channel_empty_n;
wire   [7:0] maskId_c_channel_dout;
wire    maskId_c_channel_empty_n;
wire   [15:0] crossHairX_c_channel_dout;
wire    crossHairX_c_channel_empty_n;
wire   [15:0] crossHairY_c_channel_dout;
wire    crossHairY_c_channel_empty_n;
wire   [15:0] boxSize_c_channel_dout;
wire    boxSize_c_channel_empty_n;
wire   [15:0] boxColorR_c_channel_dout;
wire    boxColorR_c_channel_empty_n;
wire   [15:0] boxColorG_c_channel_dout;
wire    boxColorG_c_channel_empty_n;
wire   [15:0] boxColorB_c_channel_dout;
wire    boxColorB_c_channel_empty_n;
wire    bckgndYUV_full_n;
wire   [23:0] bckgndYUV_dout;
wire    bckgndYUV_empty_n;
wire    height_c_full_n;
wire   [15:0] height_c_dout;
wire    height_c_empty_n;
wire    width_c_full_n;
wire   [15:0] width_c_dout;
wire    width_c_empty_n;
wire    motionSpeed_c_full_n;
wire   [7:0] motionSpeed_c_dout;
wire    motionSpeed_c_empty_n;
wire    colorFormat_c_full_n;
wire   [7:0] colorFormat_c_dout;
wire    colorFormat_c_empty_n;
wire    ovrlayYUV_full_n;
wire   [23:0] ovrlayYUV_dout;
wire    ovrlayYUV_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_tpgBackground_U0_ap_ready;
wire    ap_sync_tpgBackground_U0_ap_ready;
reg    ap_sync_reg_MultiPixStream2AXIvideo_U0_ap_ready;
wire    ap_sync_MultiPixStream2AXIvideo_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_boxColorB_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_boxColorG_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_boxColorR_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_boxSize_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_crossHairY_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_crossHairX_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_maskId_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_ovrlayId_c_channel = 1'b0;
#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_tpgBackground_U0_ap_ready = 1'b0;
#0 ap_sync_reg_MultiPixStream2AXIvideo_U0_ap_ready = 1'b0;
end

design_1_v_tpg_0_0_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc_U0_ap_start),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .ovrlayId(ovrlayId),
    .maskId(maskId),
    .crossHairX(crossHairX),
    .crossHairY(crossHairY),
    .boxSize(boxSize),
    .boxColorR(boxColorR),
    .boxColorG(boxColorG),
    .boxColorB(boxColorB),
    .ap_return_0(entry_proc_U0_ap_return_0),
    .ap_return_1(entry_proc_U0_ap_return_1),
    .ap_return_2(entry_proc_U0_ap_return_2),
    .ap_return_3(entry_proc_U0_ap_return_3),
    .ap_return_4(entry_proc_U0_ap_return_4),
    .ap_return_5(entry_proc_U0_ap_return_5),
    .ap_return_6(entry_proc_U0_ap_return_6),
    .ap_return_7(entry_proc_U0_ap_return_7)
);

design_1_v_tpg_0_0_tpgBackground tpgBackground_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(tpgBackground_U0_ap_start),
    .ap_done(tpgBackground_U0_ap_done),
    .ap_continue(tpgBackground_U0_ap_continue),
    .ap_idle(tpgBackground_U0_ap_idle),
    .ap_ready(tpgBackground_U0_ap_ready),
    .height(height),
    .width(width),
    .bckgndId(bckgndId),
    .ZplateHorContStart(ZplateHorContStart),
    .ZplateHorContDelta(ZplateHorContDelta),
    .ZplateVerContStart(ZplateVerContStart),
    .ZplateVerContDelta(ZplateVerContDelta),
    .dpDynamicRange(dpDynamicRange),
    .dpYUVCoef(dpYUVCoef),
    .motionSpeed(motionSpeed),
    .colorFormat(colorFormat),
    .bckgndYUV_din(tpgBackground_U0_bckgndYUV_din),
    .bckgndYUV_full_n(bckgndYUV_full_n),
    .bckgndYUV_write(tpgBackground_U0_bckgndYUV_write),
    .height_c_din(tpgBackground_U0_height_c_din),
    .height_c_full_n(height_c_full_n),
    .height_c_write(tpgBackground_U0_height_c_write),
    .width_c_din(tpgBackground_U0_width_c_din),
    .width_c_full_n(width_c_full_n),
    .width_c_write(tpgBackground_U0_width_c_write),
    .motionSpeed_c_din(tpgBackground_U0_motionSpeed_c_din),
    .motionSpeed_c_full_n(motionSpeed_c_full_n),
    .motionSpeed_c_write(tpgBackground_U0_motionSpeed_c_write),
    .colorFormat_c_din(tpgBackground_U0_colorFormat_c_din),
    .colorFormat_c_full_n(colorFormat_c_full_n),
    .colorFormat_c_write(tpgBackground_U0_colorFormat_c_write),
    .s(s)
);

design_1_v_tpg_0_0_tpgForeground tpgForeground_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(tpgForeground_U0_ap_start),
    .ap_done(tpgForeground_U0_ap_done),
    .ap_continue(tpgForeground_U0_ap_continue),
    .ap_idle(tpgForeground_U0_ap_idle),
    .ap_ready(tpgForeground_U0_ap_ready),
    .bckgndYUV_dout(bckgndYUV_dout),
    .bckgndYUV_empty_n(bckgndYUV_empty_n),
    .bckgndYUV_read(tpgForeground_U0_bckgndYUV_read),
    .height_dout(height_c_dout),
    .height_empty_n(height_c_empty_n),
    .height_read(tpgForeground_U0_height_read),
    .width_dout(width_c_dout),
    .width_empty_n(width_c_empty_n),
    .width_read(tpgForeground_U0_width_read),
    .p_read(ovrlayId_c_channel_dout),
    .p_read1(maskId_c_channel_dout),
    .colorFormat_dout(colorFormat_c_dout),
    .colorFormat_empty_n(colorFormat_c_empty_n),
    .colorFormat_read(tpgForeground_U0_colorFormat_read),
    .p_read2(crossHairX_c_channel_dout),
    .p_read3(crossHairY_c_channel_dout),
    .p_read4(boxSize_c_channel_dout),
    .p_read5(boxColorR_c_channel_dout),
    .p_read6(boxColorG_c_channel_dout),
    .p_read7(boxColorB_c_channel_dout),
    .motionSpeed_dout(motionSpeed_c_dout),
    .motionSpeed_empty_n(motionSpeed_c_empty_n),
    .motionSpeed_read(tpgForeground_U0_motionSpeed_read),
    .ovrlayYUV_din(tpgForeground_U0_ovrlayYUV_din),
    .ovrlayYUV_full_n(ovrlayYUV_full_n),
    .ovrlayYUV_write(tpgForeground_U0_ovrlayYUV_write)
);

design_1_v_tpg_0_0_MultiPixStream2AXIvideo MultiPixStream2AXIvideo_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(MultiPixStream2AXIvideo_U0_ap_start),
    .ap_done(MultiPixStream2AXIvideo_U0_ap_done),
    .ap_continue(MultiPixStream2AXIvideo_U0_ap_continue),
    .ap_idle(MultiPixStream2AXIvideo_U0_ap_idle),
    .ap_ready(MultiPixStream2AXIvideo_U0_ap_ready),
    .ovrlayYUV_dout(ovrlayYUV_dout),
    .ovrlayYUV_empty_n(ovrlayYUV_empty_n),
    .ovrlayYUV_read(MultiPixStream2AXIvideo_U0_ovrlayYUV_read),
    .m_axis_video_TDATA(MultiPixStream2AXIvideo_U0_m_axis_video_TDATA),
    .m_axis_video_TVALID(MultiPixStream2AXIvideo_U0_m_axis_video_TVALID),
    .m_axis_video_TREADY(m_axis_video_TREADY),
    .m_axis_video_TKEEP(MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP),
    .m_axis_video_TSTRB(MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB),
    .m_axis_video_TUSER(MultiPixStream2AXIvideo_U0_m_axis_video_TUSER),
    .m_axis_video_TLAST(MultiPixStream2AXIvideo_U0_m_axis_video_TLAST),
    .m_axis_video_TID(MultiPixStream2AXIvideo_U0_m_axis_video_TID),
    .m_axis_video_TDEST(MultiPixStream2AXIvideo_U0_m_axis_video_TDEST),
    .height(height),
    .width(width),
    .colorFormat(colorFormat),
    .fid_in(fid_in),
    .fid(MultiPixStream2AXIvideo_U0_fid),
    .fid_ap_vld(MultiPixStream2AXIvideo_U0_fid_ap_vld),
    .field_id(field_id)
);

design_1_v_tpg_0_0_fifo_w8_d2_S ovrlayId_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_ap_return_0),
    .if_full_n(ovrlayId_c_channel_full_n),
    .if_write(ap_channel_done_ovrlayId_c_channel),
    .if_dout(ovrlayId_c_channel_dout),
    .if_empty_n(ovrlayId_c_channel_empty_n),
    .if_read(tpgForeground_U0_ap_ready)
);

design_1_v_tpg_0_0_fifo_w8_d2_S maskId_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_ap_return_1),
    .if_full_n(maskId_c_channel_full_n),
    .if_write(ap_channel_done_maskId_c_channel),
    .if_dout(maskId_c_channel_dout),
    .if_empty_n(maskId_c_channel_empty_n),
    .if_read(tpgForeground_U0_ap_ready)
);

design_1_v_tpg_0_0_fifo_w16_d2_S crossHairX_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_ap_return_2),
    .if_full_n(crossHairX_c_channel_full_n),
    .if_write(ap_channel_done_crossHairX_c_channel),
    .if_dout(crossHairX_c_channel_dout),
    .if_empty_n(crossHairX_c_channel_empty_n),
    .if_read(tpgForeground_U0_ap_ready)
);

design_1_v_tpg_0_0_fifo_w16_d2_S crossHairY_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_ap_return_3),
    .if_full_n(crossHairY_c_channel_full_n),
    .if_write(ap_channel_done_crossHairY_c_channel),
    .if_dout(crossHairY_c_channel_dout),
    .if_empty_n(crossHairY_c_channel_empty_n),
    .if_read(tpgForeground_U0_ap_ready)
);

design_1_v_tpg_0_0_fifo_w16_d2_S boxSize_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_ap_return_4),
    .if_full_n(boxSize_c_channel_full_n),
    .if_write(ap_channel_done_boxSize_c_channel),
    .if_dout(boxSize_c_channel_dout),
    .if_empty_n(boxSize_c_channel_empty_n),
    .if_read(tpgForeground_U0_ap_ready)
);

design_1_v_tpg_0_0_fifo_w16_d2_S boxColorR_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_ap_return_5),
    .if_full_n(boxColorR_c_channel_full_n),
    .if_write(ap_channel_done_boxColorR_c_channel),
    .if_dout(boxColorR_c_channel_dout),
    .if_empty_n(boxColorR_c_channel_empty_n),
    .if_read(tpgForeground_U0_ap_ready)
);

design_1_v_tpg_0_0_fifo_w16_d2_S boxColorG_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_ap_return_6),
    .if_full_n(boxColorG_c_channel_full_n),
    .if_write(ap_channel_done_boxColorG_c_channel),
    .if_dout(boxColorG_c_channel_dout),
    .if_empty_n(boxColorG_c_channel_empty_n),
    .if_read(tpgForeground_U0_ap_ready)
);

design_1_v_tpg_0_0_fifo_w16_d2_S boxColorB_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_ap_return_7),
    .if_full_n(boxColorB_c_channel_full_n),
    .if_write(ap_channel_done_boxColorB_c_channel),
    .if_dout(boxColorB_c_channel_dout),
    .if_empty_n(boxColorB_c_channel_empty_n),
    .if_read(tpgForeground_U0_ap_ready)
);

design_1_v_tpg_0_0_fifo_w24_d16_S bckgndYUV_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tpgBackground_U0_bckgndYUV_din),
    .if_full_n(bckgndYUV_full_n),
    .if_write(tpgBackground_U0_bckgndYUV_write),
    .if_dout(bckgndYUV_dout),
    .if_empty_n(bckgndYUV_empty_n),
    .if_read(tpgForeground_U0_bckgndYUV_read)
);

design_1_v_tpg_0_0_fifo_w16_d2_S height_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tpgBackground_U0_height_c_din),
    .if_full_n(height_c_full_n),
    .if_write(tpgBackground_U0_height_c_write),
    .if_dout(height_c_dout),
    .if_empty_n(height_c_empty_n),
    .if_read(tpgForeground_U0_height_read)
);

design_1_v_tpg_0_0_fifo_w16_d2_S width_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tpgBackground_U0_width_c_din),
    .if_full_n(width_c_full_n),
    .if_write(tpgBackground_U0_width_c_write),
    .if_dout(width_c_dout),
    .if_empty_n(width_c_empty_n),
    .if_read(tpgForeground_U0_width_read)
);

design_1_v_tpg_0_0_fifo_w8_d2_S motionSpeed_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tpgBackground_U0_motionSpeed_c_din),
    .if_full_n(motionSpeed_c_full_n),
    .if_write(tpgBackground_U0_motionSpeed_c_write),
    .if_dout(motionSpeed_c_dout),
    .if_empty_n(motionSpeed_c_empty_n),
    .if_read(tpgForeground_U0_motionSpeed_read)
);

design_1_v_tpg_0_0_fifo_w8_d2_S colorFormat_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tpgBackground_U0_colorFormat_c_din),
    .if_full_n(colorFormat_c_full_n),
    .if_write(tpgBackground_U0_colorFormat_c_write),
    .if_dout(colorFormat_c_dout),
    .if_empty_n(colorFormat_c_empty_n),
    .if_read(tpgForeground_U0_colorFormat_read)
);

design_1_v_tpg_0_0_fifo_w24_d16_S ovrlayYUV_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tpgForeground_U0_ovrlayYUV_din),
    .if_full_n(ovrlayYUV_full_n),
    .if_write(tpgForeground_U0_ovrlayYUV_write),
    .if_dout(ovrlayYUV_dout),
    .if_empty_n(ovrlayYUV_empty_n),
    .if_read(MultiPixStream2AXIvideo_U0_ovrlayYUV_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_MultiPixStream2AXIvideo_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_MultiPixStream2AXIvideo_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_MultiPixStream2AXIvideo_U0_ap_ready <= ap_sync_MultiPixStream2AXIvideo_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_boxColorB_c_channel <= 1'b0;
    end else begin
        if (((entry_proc_U0_ap_done & entry_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_boxColorB_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_boxColorB_c_channel <= ap_sync_channel_write_boxColorB_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_boxColorG_c_channel <= 1'b0;
    end else begin
        if (((entry_proc_U0_ap_done & entry_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_boxColorG_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_boxColorG_c_channel <= ap_sync_channel_write_boxColorG_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_boxColorR_c_channel <= 1'b0;
    end else begin
        if (((entry_proc_U0_ap_done & entry_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_boxColorR_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_boxColorR_c_channel <= ap_sync_channel_write_boxColorR_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_boxSize_c_channel <= 1'b0;
    end else begin
        if (((entry_proc_U0_ap_done & entry_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_boxSize_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_boxSize_c_channel <= ap_sync_channel_write_boxSize_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_crossHairX_c_channel <= 1'b0;
    end else begin
        if (((entry_proc_U0_ap_done & entry_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_crossHairX_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_crossHairX_c_channel <= ap_sync_channel_write_crossHairX_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_crossHairY_c_channel <= 1'b0;
    end else begin
        if (((entry_proc_U0_ap_done & entry_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_crossHairY_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_crossHairY_c_channel <= ap_sync_channel_write_crossHairY_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_maskId_c_channel <= 1'b0;
    end else begin
        if (((entry_proc_U0_ap_done & entry_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_maskId_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_maskId_c_channel <= ap_sync_channel_write_maskId_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ovrlayId_c_channel <= 1'b0;
    end else begin
        if (((entry_proc_U0_ap_done & entry_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ovrlayId_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ovrlayId_c_channel <= ap_sync_channel_write_ovrlayId_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_tpgBackground_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_tpgBackground_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_tpgBackground_U0_ap_ready <= ap_sync_tpgBackground_U0_ap_ready;
        end
    end
end

assign MultiPixStream2AXIvideo_U0_ap_continue = ap_continue;

assign MultiPixStream2AXIvideo_U0_ap_start = ((ap_sync_reg_MultiPixStream2AXIvideo_U0_ap_ready ^ 1'b1) & ap_start);

assign ap_channel_done_boxColorB_c_channel = ((ap_sync_reg_channel_write_boxColorB_c_channel ^ 1'b1) & entry_proc_U0_ap_done);

assign ap_channel_done_boxColorG_c_channel = ((ap_sync_reg_channel_write_boxColorG_c_channel ^ 1'b1) & entry_proc_U0_ap_done);

assign ap_channel_done_boxColorR_c_channel = ((ap_sync_reg_channel_write_boxColorR_c_channel ^ 1'b1) & entry_proc_U0_ap_done);

assign ap_channel_done_boxSize_c_channel = ((ap_sync_reg_channel_write_boxSize_c_channel ^ 1'b1) & entry_proc_U0_ap_done);

assign ap_channel_done_crossHairX_c_channel = ((ap_sync_reg_channel_write_crossHairX_c_channel ^ 1'b1) & entry_proc_U0_ap_done);

assign ap_channel_done_crossHairY_c_channel = ((ap_sync_reg_channel_write_crossHairY_c_channel ^ 1'b1) & entry_proc_U0_ap_done);

assign ap_channel_done_maskId_c_channel = ((ap_sync_reg_channel_write_maskId_c_channel ^ 1'b1) & entry_proc_U0_ap_done);

assign ap_channel_done_ovrlayId_c_channel = ((ap_sync_reg_channel_write_ovrlayId_c_channel ^ 1'b1) & entry_proc_U0_ap_done);

assign ap_done = MultiPixStream2AXIvideo_U0_ap_done;

assign ap_idle = (tpgForeground_U0_ap_idle & tpgBackground_U0_ap_idle & (boxColorB_c_channel_empty_n ^ 1'b1) & (boxColorG_c_channel_empty_n ^ 1'b1) & (boxColorR_c_channel_empty_n ^ 1'b1) & (boxSize_c_channel_empty_n ^ 1'b1) & (crossHairY_c_channel_empty_n ^ 1'b1) & (crossHairX_c_channel_empty_n ^ 1'b1) & (maskId_c_channel_empty_n ^ 1'b1) & (ovrlayId_c_channel_empty_n ^ 1'b1) & entry_proc_U0_ap_idle & MultiPixStream2AXIvideo_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_MultiPixStream2AXIvideo_U0_ap_ready = (ap_sync_reg_MultiPixStream2AXIvideo_U0_ap_ready | MultiPixStream2AXIvideo_U0_ap_ready);

assign ap_sync_channel_write_boxColorB_c_channel = ((boxColorB_c_channel_full_n & ap_channel_done_boxColorB_c_channel) | ap_sync_reg_channel_write_boxColorB_c_channel);

assign ap_sync_channel_write_boxColorG_c_channel = ((boxColorG_c_channel_full_n & ap_channel_done_boxColorG_c_channel) | ap_sync_reg_channel_write_boxColorG_c_channel);

assign ap_sync_channel_write_boxColorR_c_channel = ((boxColorR_c_channel_full_n & ap_channel_done_boxColorR_c_channel) | ap_sync_reg_channel_write_boxColorR_c_channel);

assign ap_sync_channel_write_boxSize_c_channel = ((boxSize_c_channel_full_n & ap_channel_done_boxSize_c_channel) | ap_sync_reg_channel_write_boxSize_c_channel);

assign ap_sync_channel_write_crossHairX_c_channel = ((crossHairX_c_channel_full_n & ap_channel_done_crossHairX_c_channel) | ap_sync_reg_channel_write_crossHairX_c_channel);

assign ap_sync_channel_write_crossHairY_c_channel = ((crossHairY_c_channel_full_n & ap_channel_done_crossHairY_c_channel) | ap_sync_reg_channel_write_crossHairY_c_channel);

assign ap_sync_channel_write_maskId_c_channel = ((maskId_c_channel_full_n & ap_channel_done_maskId_c_channel) | ap_sync_reg_channel_write_maskId_c_channel);

assign ap_sync_channel_write_ovrlayId_c_channel = ((ovrlayId_c_channel_full_n & ap_channel_done_ovrlayId_c_channel) | ap_sync_reg_channel_write_ovrlayId_c_channel);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_ready = (ap_sync_tpgBackground_U0_ap_ready & ap_sync_entry_proc_U0_ap_ready & ap_sync_MultiPixStream2AXIvideo_U0_ap_ready);

assign ap_sync_tpgBackground_U0_ap_ready = (tpgBackground_U0_ap_ready | ap_sync_reg_tpgBackground_U0_ap_ready);

assign entry_proc_U0_ap_continue = (ap_sync_channel_write_ovrlayId_c_channel & ap_sync_channel_write_maskId_c_channel & ap_sync_channel_write_crossHairY_c_channel & ap_sync_channel_write_crossHairX_c_channel & ap_sync_channel_write_boxSize_c_channel & ap_sync_channel_write_boxColorR_c_channel & ap_sync_channel_write_boxColorG_c_channel & ap_sync_channel_write_boxColorB_c_channel);

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign fid = MultiPixStream2AXIvideo_U0_fid;

assign fid_ap_vld = MultiPixStream2AXIvideo_U0_fid_ap_vld;

assign m_axis_video_TDATA = MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;

assign m_axis_video_TDEST = MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;

assign m_axis_video_TID = MultiPixStream2AXIvideo_U0_m_axis_video_TID;

assign m_axis_video_TKEEP = MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;

assign m_axis_video_TLAST = MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;

assign m_axis_video_TSTRB = MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;

assign m_axis_video_TUSER = MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;

assign m_axis_video_TVALID = MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;

assign tpgBackground_U0_ap_continue = 1'b1;

assign tpgBackground_U0_ap_start = ((ap_sync_reg_tpgBackground_U0_ap_ready ^ 1'b1) & ap_start);

assign tpgForeground_U0_ap_continue = 1'b1;

assign tpgForeground_U0_ap_start = (ovrlayId_c_channel_empty_n & maskId_c_channel_empty_n & crossHairY_c_channel_empty_n & crossHairX_c_channel_empty_n & boxSize_c_channel_empty_n & boxColorR_c_channel_empty_n & boxColorG_c_channel_empty_n & boxColorB_c_channel_empty_n);

endmodule //design_1_v_tpg_0_0_v_tpgHlsDataFlow
